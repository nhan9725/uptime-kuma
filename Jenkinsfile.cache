pipeline {
    agent {
  kubernetes {
    yamlFile 'k8s/KubernetesPod.yaml' 
}
  }
    environment {
        YARN_CACHE_FOLDER = "/home/jenkins/.cache/yarn"
    }

    stages {
//
        stage ('Check for existence of index.html') {
            steps {
                script {
                    if (fileExists('/home/jenkins/.cache/yarn/dependencies-9e80c5051af62a08fc2b6cc2b5f90e02.tar')) {
                    echo "File home/jenkins/.cache/yarn/dependencies-9e80c5051af62a08fc2b6cc2b5f90e02.tar found!"
                }
                else {
                echo "No file found"
            }
        }
    }
}
//
        stage('Prepare') {
            steps {
                script {
                    // Calculate hash of package.json and yarn.lock
                    def hash = sh(script: 'md5sum package.json yarn.lock | md5sum | cut -d" " -f1', returnStdout: true).trim()
                    env.CACHE_FILE = "${YARN_CACHE_FOLDER}/dependencies-${hash}.tar"

                    echo "Calculated cache file: ${env.CACHE_FILE}"

                    // Check if the cache file exists
                    if (fileExists(env.CACHE_FILE)) {
                        echo "Cache hit, extracting dependencies..."
                        sh "tar -xf ${env.CACHE_FILE}"
                    } else {
                        echo "No cache found, installing dependencies."
                    }
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    // Set the Yarn cache folder environment variable
                    sh 'yarn config set cache-folder $YARN_CACHE_FOLDER'

                    // Check if we need to install dependencies
                    def cacheHit = fileExists('node_modules')
                    if (!cacheHit) {
                        // Install dependencies
                        sh 'yarn install'

                        // Create the tar file for caching
                        sh "tar -cf ${env.CACHE_FILE} node_modules .yarn_cache"
                    }
                }
            }
        }


    }

    post {
        always {
            // Clean up stashed files
            cleanWs()
        }
    }
}
