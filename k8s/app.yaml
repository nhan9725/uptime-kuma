# # MySQL PersistentVolumeClaim
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: mysql-pvc
# spec:
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 10Gi

# ---
# # MySQL Deployment
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: mysql
#   labels:
#     app: mysql
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: mysql
#   template:
#     metadata:
#       labels:
#         app: mysql
#     spec:
#       containers:
#       - name: mysql
#         image: mysql:5.7
#         ports:
#         - containerPort: 3306
#         env:
#         - name: MYSQL_ROOT_PASSWORD
#           value: KIOfBUB2NkgfOW7
#         - name: MYSQL_DATABASE
#           value: test
#         - name: MYSQL_USER
#           value: test
#         - name: MYSQL_PASSWORD
#           value: Test@2008@123
#         volumeMounts:
#         - name: mysql-persistent-storage
#           mountPath: /var/lib/mysql
#       volumes:
#       - name: mysql-persistent-storage
#         persistentVolumeClaim:
#           claimName: mysql-pvc
#       affinity:
#         nodeAffinity:
#           requiredDuringSchedulingIgnoredDuringExecution:
#             nodeSelectorTerms:
#             - matchExpressions:
#               - key: instancePurpose
#                 operator: In
#                 values:
#                 - deployment

# ---
# # MySQL Service
# apiVersion: v1
# kind: Service
# metadata:
#   name: mysql
# spec:
#   selector:
#     app: mysql
#   ports:
#   - port: 3306
#     targetPort: 3306
#     protocol: TCP
#   clusterIP: None  # Headless service for DNS resolution within the cluster

# ---
# Node.js Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodejs-app
  labels:
    app: nodejs-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nodejs-app
  template:
    metadata:
      labels:
        app: nodejs-app
    spec:
      containers:
      - name: nodejs-app
        image: 082568704422.dkr.ecr.me-south-1.amazonaws.com/nextjs:test-1908-01
        ports:
        - containerPort: 3001
        env:
        - name: NODE_ENV
          value: "testing"
        - name: MYSQL_HOST
          value: my-release-mysql.jenkins.svc.cluster.local
        - name: MYSQL_DATABASE
          value: test
        - name: MYSQL_USER
          value: test
        - name: MYSQL_PASSWORD
          value: Test@2008@123
        volumeMounts:
        - mountPath: /app/data
          name: data-dir
        resources: {}
        # Uncomment below if you want to add resource limits/requests
        # requests:
        #   memory: "64Mi"
        #   cpu: "250m"
        # limits:
        #   memory: "128Mi"
        #   cpu: "500m"
      volumes:
      - name: data-dir
        emptyDir: {}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: instancePurpose
                operator: In
                values:
                - deployment

---
# Node.js Service
apiVersion: v1
kind: Service
metadata:
  name: nodejs-app-service
spec:
  selector:
    app: nodejs-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3001
  type: LoadBalancer

---
# Ingress for Node.js App
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nodejs-app-ingress
  annotations:
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:me-south-1:082568704422:certificate/dda5121a-75bb-4cc6-94f4-69cdc839686d
    alb.ingress.kubernetes.io/group.name: frontend-staging
    alb.ingress.kubernetes.io/healthcheck-path: /
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
spec:
  ingressClassName: alb  # Using ingressClassName instead of annotation
  rules:
  - host: test-uptime.9ten.online
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nodejs-app-service
            port:
              number: 80
  tls: []
  # Uncomment the block below to enable TLS if required
  # - hosts:
  #   - test-uptime.9ten.online
  #   secretName: your-tls-secret  # Kubernetes secret for the SSL certificate

